#!/usr/bin/env python3
import sys
import os
import subprocess

from pathlib import Path


# Try to import tomllib (Python 3.11+), tomli, or toml, fail gracefully if missing
toml_loader = None
toml_loader_name = None
try:
    import tomllib

    toml_loader = tomllib
    toml_loader_name = "tomllib (builtin)"
except ImportError:
    try:
        import tomli

        toml_loader = tomli
        toml_loader_name = "tomli (external)"
    except ImportError:
        try:
            import toml

            toml_loader = toml
            toml_loader_name = "toml (external)"
        except ImportError:
            toml_loader = None
            toml_loader_name = None

SUITE_VERSION = "1.0.0"


def get_tools_from_manifest():
    manifest_path = Path.home() / ".config" / "intermcli" / "tools_manifest.toml"
    print("Looking for manifest at:", manifest_path)
    if not manifest_path.exists():
        print("tools_manifest.toml not found.")
        return []
    if not toml_loader:
        print(
            "No TOML parser found. Supported: Python 3.11+ (tomllib), 'tomli', or 'toml'."
        )
        print(
            "Install with: 'pip3 install tomli' (recommended for Python <3.11) or 'pip3 install toml'."
        )
        return []
    try:
        if toml_loader_name in ["tomllib (builtin)", "tomli (external)"]:
            with open(manifest_path, "rb") as f:
                manifest = toml_loader.load(f)
        else:
            manifest = toml_loader.load(manifest_path)
        return [
            {"name": tool.get("name", ""), "description": tool.get("description", "")}
            for tool in manifest.get("tool", [])
        ]
    except Exception as e:
        print(f"Error loading tools_manifest.toml: {e}")
        return []


def show_suite_help():
    print(f"IntermCLI Suite v{SUITE_VERSION}")
    print("Usage:")
    print("  interm list         Show available tools")
    print("  interm version      Show suite version")
    print("  interm about        Project info, docs, installation")


def handle_suite_command(command, args):
    if command == "list":
        tools = get_tools_from_manifest()
        if not tools:
            print("No tools found or unable to read manifest.")
            return
        print("Available tools:")
        for tool in tools:
            name = tool.get("name", "")
            desc = tool.get("description", "")
            if desc:
                print(f"  {name:15} - {desc}")
            else:
                print(f"  {name}")
    elif command == "version":
        print(f"IntermCLI Suite version {SUITE_VERSION}")
    elif command == "about":
        print(f"IntermCLI Suite v{SUITE_VERSION}")
        print("Project: https://github.com/pdbeard/intermcli")
        print("Installation: ./install.sh or see README.md")
        print("Documentation: docs/ and https://github.com/pdbeard/intermcli/docs")
        print("Each tool has its own config file. See tool docs for details.")
    else:
        show_suite_help()


def find_tool_executable(tool_name):
    # Look in ~/.local/bin first
    local_bin = Path.home() / ".local" / "bin" / tool_name
    if local_bin.exists():
        return str(local_bin)
    # Fallback to PATH

    return shutil.which(tool_name) or tool_name


def tool_exists(tool_name):
    return find_tool_executable(tool_name) is not None


def delegate_to_tool(tool_name, args):
    tool_path = find_tool_executable(tool_name)
    if not tool_path or not os.path.exists(tool_path):
        print(f"❌ Tool '{tool_name}' not found.")
        sys.exit(1)
    # Use python for .py scripts, else run directly
    if tool_path.endswith(".py"):
        cmd = [sys.executable, tool_path] + args
    else:
        cmd = [tool_path] + args
    subprocess.run(cmd)


def main():
    if len(sys.argv) < 2:
        show_suite_help()
        return

    command = sys.argv[1]
    if command in ["list", "version", "about"]:
        handle_suite_command(command, sys.argv[2:])
    else:
        show_suite_help()


if __name__ == "__main__":
    import shutil

    main()
