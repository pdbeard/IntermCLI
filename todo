## IntermCLI 1.0 Release Checklist

1. Documentation
- [ ] Ensure every tool has a complete doc: usage, config, troubleshooting, feature list.
- [ ] Update suite-level docs (README.md, architecture, contributing, design).
- [ ] Add naming conventions and enhancement descriptions.
- [ ] Document branching strategy (even if PRs arenâ€™t enforced yet).
- [ ] Update or finalize CHANGELOG.md (or rely on Release Drafter).

2. Testing
- [ ] Confirm all tools and features have unit/integration tests.
- [ ] Add tests for error handling and config overrides.
- [ ] Ensure CI passes for all supported Python versions/OSes.

3. CI/CD & Automation
- [ ] Confirm CI workflow covers lint, format, audit, docs build, and dependency caching.
- [ ] Ensure release automation and changelog automation are working.
- [ ] (Optional) Add artifact build/upload if relevant.

4. Features & Polish
- [ ] Finalize local config support for tools.
- [ ] Review and update tools_manifest.toml and suite-level docs.
- [ ] Decide on any last features or polish from your TODO list.

5. Project Management
- [ ] Add actionable TODOs for each tool/folder.
- [ ] Clean up and organize enhancement descriptions.



## Hardcoded Values Refactor Checklist

- [ ] Move all default values (ports, directories, editors, timeouts, etc.) to TOML config files for each tool
- [ ] Ensure all file paths are configurable via environment variables or CLI arguments
- [ ] Replace hardcoded port numbers and service names with config-driven lists
- [ ] Document all overridable settings in each tool's README
- [ ] Allow CLI arguments and environment variables to override any config value
- [ ] Remove hardcoded extensions/types; use config for file type rules
- [ ] Refactor test code to use config-driven values where possible
- [ ] Audit for any remaining hardcoded strings, numbers, or paths in Python code
- [ ] Add tests to confirm config overrides work as expected
- [ ] Update documentation to reflect new dynamic configuration approach





Other Ideas/TODOS

# CI/Automation
- set up branch protection rules/ Mandate PR for changes to main to help with release automation
- Add MkDocs documentation build
- Add macOS/Windows runners
- Release automation
- Cache dependencies
- Build and upload artifacts
- Custom test markers
- Discord alerts for fun

# Tool Config/Enhancements
- Local config files for tool customization
  - find-projects: run custom commands when opening projects
  - sort-files: custom rule sets per directory (for automation)

# Project Management
- Determine GitHub branching strategy
- Update docs with new strategy
- Add TODOs for each tool/folder
- Write clear descriptions for enhancements (e.g., reduced flickering)
- Add naming convention documentation

# Tool Ideas
## Scripty things
- Renaming scripts, backup scripts, webserver utilities
- Aliases for common tasks (e.g., docker mass quit)

## Service/Monitoring
- Check common services (custom list, active monitoring)

## Logging/Analysis
- Good logging scripts (multifile support, filtering, highlighting)
- Analyze logs (how to approach?)

## User Management
- User/group info scripts
- Last logins, fast enable/disable/create

## Disk/Backup
- Find large files
- Backups for config files

## General Maintenance
- General update script (pull info from APIs, list community security warnings)
- Rotate log scripts
- Rotate keys (SSH, API)
- More individualized process monitor (watch specific processes)
- Find suid/sgid files

# Web Dev Scripts
- Check SSL
- Test endpoints (Postman style)
- Lint configs
- Find secrets
- Deploy static sites
- Monitor uptime
- Check CORS
- Analyze dependencies
- Generate env files
- Check accessibility
- Test webhooks
- Generate sitemap
- Check redirects
- Generate favicons
- Check headers
- Test CSP headers
- Generate JSON templates

# General Utilities
- Terminal color schemes
- Find open PRs
- Sync dotfiles
- Check DNS
- Test SMTP
- Generate password
- Ripgrep/grep wrapper
- Encrypt/decrypt files
- Better pop/popd (like Z)
- Download manager/watcher
- Clipboard manager
- Firewall scripts
- Install/configure favorite tools (fail2ban, security settings, SSH)
- Find duplicates
- Color picker and profiles (from terminal)

---

